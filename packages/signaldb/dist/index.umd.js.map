{"version":3,"file":"index.umd.js","sources":["../src/types/EventEmitter.ts","../src/utils/match.ts","../src/utils/modify.ts","../src/utils/isEqual.ts","../src/utils/randomId.ts","../src/utils/deepClone.ts","../src/utils/serializeValue.ts","../src/utils/createSignal.ts","../src/utils/get.ts","../src/utils/sortItems.ts","../src/utils/set.ts","../src/utils/project.ts","../src/utils/uniqueBy.ts","../src/Collection/Observer.ts","../src/Collection/Cursor.ts","../../../node_modules/tslib/tslib.es6.mjs","../src/utils/intersection.ts","../src/Collection/getIndexInfo.ts","../src/createIndexProvider.ts","../src/utils/isFieldExpression.ts","../src/utils/getMatchingKeys.ts","../src/Collection/createIndex.ts","../src/Collection/index.ts","../src/persistence/createPersistenceAdapter.ts","../src/persistence/createLocalStorageAdapter.ts","../src/persistence/createFilesystemAdapter.ts","../src/PersistentCollection.ts","../src/persistence/combinePersistenceAdapters.ts","../src/ReplicatedCollection.ts","../src/AutoFetchCollection.ts","../src/persistence/createOPFSAdapter.ts","../src/createMemoryAdapter.ts","../src/createReactivityAdapter.ts","../src/utils/debounce.ts","../src/utils/PromiseQueue.ts","../src/SyncManager/computeChanges.ts","../src/SyncManager/getSnapshot.ts","../src/SyncManager/applyChanges.ts","../src/SyncManager/sync.ts","../src/SyncManager/index.ts"],"sourcesContent":["import { EventEmitter as BaseEventEmitter } from 'events';\nexport default class EventEmitter extends BaseEventEmitter {\n    on(event, listener) {\n        super.on(event, listener);\n        return this;\n    }\n    emit(event, ...args) {\n        return super.emit(event, ...args);\n    }\n}\n","import { Query } from 'mingo';\nexport default function match(item, selector) {\n    const query = new Query(selector);\n    return query.test(item);\n}\n","import { updateObject } from 'mingo/updater';\nexport default function modify(item, modifier) {\n    const clonedItem = Object.assign({}, item);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    updateObject(clonedItem, modifier);\n    return clonedItem;\n}\n","export default function isEqual(a, b) {\n    if (Object.is(a, b))\n        return true;\n    if (a instanceof RegExp && b instanceof RegExp)\n        return a.toString() === b.toString();\n    if (a instanceof Date && b instanceof Date)\n        return a.getTime() === b.getTime();\n    if (typeof a !== 'object')\n        return false;\n    if (typeof b !== 'object')\n        return false;\n    if (a === null)\n        return false;\n    if (b === null)\n        return false;\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length)\n        return false;\n    for (let i = 0; i < aKeys.length; i += 1) {\n        const key = aKeys[i];\n        if (!bKeys.includes(key))\n            return false;\n        if (!isEqual(a[key], b[key]))\n            return false;\n    }\n    return true;\n}\n","export default function randomId() {\n    return Math.floor(Math.random() * 1e17).toString(16);\n}\n","export function clone(value) {\n    // Functions\n    if (typeof value === 'function')\n        throw new Error('Cloning functions is not supported');\n    // Check for null or primitive types (string, number, boolean, etc.)\n    if (value === null || typeof value !== 'object')\n        return value;\n    // Dates\n    if (value instanceof Date)\n        return new Date(value.getTime());\n    // Arrays\n    if (Array.isArray(value))\n        return value.map(item => clone(item));\n    // Maps\n    if (value instanceof Map) {\n        const result = new Map();\n        value.forEach((val, key) => {\n            result.set(key, clone(val));\n        });\n        return result;\n    }\n    // Sets\n    if (value instanceof Set) {\n        const result = new Set();\n        value.forEach((val) => {\n            result.add(clone(val));\n        });\n        return result;\n    }\n    // RegExp\n    if (value instanceof RegExp)\n        return new RegExp(value);\n    // plain objects\n    const result = {};\n    for (const key in value) {\n        if (Object.hasOwnProperty.call(value, key)) {\n            result[key] = clone(value[key]);\n        }\n    }\n    return result;\n}\nexport default function deepClone(obj) {\n    // If structuredClone is available, use it\n    if (typeof structuredClone === 'function')\n        return structuredClone(obj);\n    // Otherwise, perform a manual deep clone\n    /* istanbul ignore next -- @preserve */\n    return clone(obj);\n}\n","export default function serializeValue(value) {\n    if (typeof value === 'string')\n        return value;\n    if (typeof value === 'number')\n        return value.toString();\n    if (typeof value === 'boolean')\n        return value.toString();\n    if (value instanceof Date)\n        return value.toISOString();\n    return JSON.stringify(value);\n}\n","export default function createSignal(dependency, initialValue, isEqual = Object.is) {\n    let value = initialValue;\n    const signal = {\n        get() {\n            if (dependency)\n                dependency.depend();\n            return value;\n        },\n        set(newValue) {\n            if (isEqual(value, newValue))\n                return;\n            value = newValue;\n            if (dependency)\n                dependency.notify();\n        },\n    };\n    return signal;\n}\n","export default function get(value, path) {\n    const segments = path.split(/[.[\\]]/g);\n    if (segments[0] === '')\n        segments.shift();\n    if (segments[segments.length - 1] === '')\n        segments.pop();\n    let current = value;\n    for (let i = 0; i < segments.length; i += 1) {\n        const key = segments[i];\n        if (current == null || key.trim() === '')\n            return undefined;\n        current = current[key];\n    }\n    if (current === undefined)\n        return undefined;\n    return current;\n}\n","import { sort } from 'fast-sort';\nimport get from './get';\nexport default function sortItems(items, sortFields) {\n    return sort(items).by(Object.entries(sortFields).map(([key, value]) => {\n        const order = value === 1 ? 'asc' : 'desc';\n        return { [order]: (i) => get(i, key) };\n    }));\n}\n","/* eslint-disable no-param-reassign */\nexport default function set(obj, path, value, deleteIfUndefined = false) {\n    if (obj == null)\n        return obj;\n    const segments = path.split(/[.[\\]]/g);\n    if (segments[0] === '')\n        segments.shift();\n    if (segments[segments.length - 1] === '')\n        segments.pop();\n    const apply = (node) => {\n        if (segments.length > 1) {\n            const key = segments.shift();\n            const nextIsNum = !Number.isNaN(parseInt(segments[0], 10));\n            if (node[key] === undefined) {\n                node[key] = nextIsNum ? [] : {};\n            }\n            apply(node[key]);\n        }\n        else {\n            if (deleteIfUndefined && value === undefined) {\n                delete node[segments[0]];\n                return;\n            }\n            node[segments[0]] = value;\n        }\n    };\n    apply(obj);\n    return obj;\n}\n","import get from './get';\nimport set from './set';\nexport default function project(item, fields) {\n    const allFieldsDeactivated = Object.values(fields).every(value => value === 0);\n    if (allFieldsDeactivated) {\n        const result = Object.assign({}, item);\n        Object.keys(fields).forEach((key) => {\n            const fieldValue = get(item, key);\n            if (fieldValue === undefined)\n                return;\n            set(result, key, undefined, true);\n        });\n        return result;\n    }\n    const result = {};\n    Object.entries(fields).forEach(([key, value]) => {\n        const fieldValue = get(item, key);\n        if (fieldValue === undefined)\n            return;\n        if (fieldValue == null && value !== 1)\n            return;\n        set(result, key, value === 1 ? fieldValue : undefined);\n    });\n    return result;\n}\n","export default function uniqueBy(arr, fn) {\n    const set = new Set();\n    return arr.filter((el) => {\n        const value = typeof fn === 'function' ? fn(el) : el[fn];\n        return !set.has(value) && set.add(value);\n    });\n}\n","import isEqual from '../utils/isEqual';\nimport uniqueBy from '../utils/uniqueBy';\nexport default class Observer {\n    constructor(bindEvents) {\n        this.previousItems = [];\n        this.callbacks = {\n            added: [],\n            addedBefore: [],\n            changed: [],\n            changedField: [],\n            movedBefore: [],\n            removed: [],\n        };\n        this.unbindEvents = bindEvents();\n    }\n    call(event, ...args) {\n        this.callbacks[event].forEach(({ callback, options }) => {\n            // execute only if it's not initial call or if initial call should not be skipped\n            if (!options.skipInitial || !options.isInitial) {\n                callback(...args);\n            }\n        });\n    }\n    hasCallbacks(events) {\n        return events.some(event => this.callbacks[event].length > 0);\n    }\n    isEmpty() {\n        return !this.hasCallbacks([\n            'added',\n            'addedBefore',\n            'changed',\n            'changedField',\n            'movedBefore',\n            'removed',\n        ]);\n    }\n    runChecks(newItems) {\n        const oldItemsMap = new Map(this.previousItems.map((item, index) => [\n            item.id,\n            { item, index, beforeItem: this.previousItems[index + 1] || null },\n        ]));\n        const newItemsMap = new Map(newItems.map((item, index) => [\n            item.id,\n            { item, index, beforeItem: newItems[index + 1] || null },\n        ]));\n        if (this.hasCallbacks(['changed', 'changedField', 'movedBefore', 'removed'])) {\n            // Check for removed or changed items\n            oldItemsMap.forEach(({ item: oldItem, index, beforeItem: oldBeforeItem }) => {\n                var _a;\n                const newItem = newItemsMap.get(oldItem.id);\n                if (newItem) {\n                    if (this.hasCallbacks(['changed', 'changedField'])) {\n                        // If the item exists but has changed, call 'changed' callback\n                        if (!isEqual(newItem.item, oldItem)) {\n                            this.call('changed', newItem.item);\n                            if (this.hasCallbacks(['changedField'])) {\n                                // check for changed fields and call 'changedField' callback\n                                const keys = uniqueBy([\n                                    ...Object.keys(newItem.item),\n                                    ...Object.keys(oldItem),\n                                ], value => value);\n                                keys.forEach((key) => {\n                                    if (isEqual(newItem.item[key], oldItem[key]))\n                                        return;\n                                    this.call('changedField', newItem.item, key, oldItem[key], newItem.item[key]);\n                                });\n                            }\n                        }\n                    }\n                    // If the item's beforeItem has changed, call 'movedBefore' callback\n                    if (newItem.index !== index && ((_a = newItem.beforeItem) === null || _a === void 0 ? void 0 : _a.id) !== (oldBeforeItem === null || oldBeforeItem === void 0 ? void 0 : oldBeforeItem.id)) {\n                        this.call('movedBefore', newItem.item, newItem.beforeItem);\n                    }\n                }\n                else {\n                    // If the item no longer exists, call 'removed' callback\n                    this.call('removed', oldItem);\n                }\n            });\n        }\n        if (this.hasCallbacks(['added', 'addedBefore'])) {\n            // Check for added items\n            newItems.forEach((newItem, index) => {\n                const oldItem = oldItemsMap.get(newItem.id);\n                if (oldItem)\n                    return;\n                // If the item is newly added, call 'added' and 'addedBefore' callbacks\n                this.call('added', newItem);\n                this.call('addedBefore', newItem, newItems[index + 1] || null);\n            });\n        }\n        // Store new items as previous items for next check\n        this.previousItems = newItems;\n        Object.keys(this.callbacks).forEach((key) => {\n            const event = key;\n            const callbacks = this.callbacks[event];\n            this.callbacks[event] = callbacks.map(callback => (Object.assign(Object.assign({}, callback), { options: Object.assign(Object.assign({}, callback.options), { isInitial: false }) })));\n        });\n    }\n    stop() {\n        this.unbindEvents();\n    }\n    addCallbacks(callbacks, skipInitial = false) {\n        Object.keys(callbacks).forEach((key) => {\n            const typedKey = key;\n            this.callbacks[typedKey].push({\n                callback: callbacks[typedKey],\n                options: { skipInitial, isInitial: true },\n            });\n        });\n    }\n    removeCallbacks(callbacks) {\n        Object.keys(callbacks).forEach((key) => {\n            const typedKey = key;\n            const index = this.callbacks[typedKey]\n                .findIndex(({ callback }) => callback === callbacks[typedKey]);\n            this.callbacks[typedKey].splice(index, 1);\n        });\n    }\n}\n","import sortItems from '../utils/sortItems';\nimport project from '../utils/project';\nimport Observer from './Observer';\nexport function isInReactiveScope(reactivity) {\n    if (!reactivity)\n        return false; // if reactivity is disabled we don't need to check\n    if (!reactivity.isInScope)\n        return true; // if reactivity is enabled and no isInScope method is provided we assume it is in scope\n    return reactivity.isInScope(); // if reactivity is enabled and isInScope method is provided we check if it is in scope\n}\nexport default class Cursor {\n    constructor(getItems, options) {\n        this.onCleanupCallbacks = [];\n        this.getFilteredItems = getItems;\n        this.options = options || {};\n    }\n    addGetters(item) {\n        if (!isInReactiveScope(this.options.reactive))\n            return item;\n        const depend = this.depend.bind(this);\n        return Object.entries(item).reduce((memo, [key, value]) => {\n            Object.defineProperty(memo, key, {\n                get() {\n                    depend({\n                        changedField: notify => (changedItem, changedFieldName) => {\n                            if (changedFieldName !== key || changedItem.id !== item.id)\n                                return;\n                            notify();\n                        },\n                    });\n                    return value;\n                },\n                enumerable: true,\n                configurable: true,\n            });\n            return memo;\n        }, {});\n    }\n    transform(rawItem) {\n        const item = this.options.fieldTracking\n            ? this.addGetters(rawItem)\n            : rawItem;\n        if (!this.options.transform)\n            return item;\n        return this.options.transform(item);\n    }\n    getItems() {\n        const items = this.getFilteredItems();\n        const { sort, skip, limit } = this.options;\n        const sorted = sort ? sortItems(items, sort) : items;\n        const skipped = skip ? sorted.slice(skip) : sorted;\n        const limited = limit ? skipped.slice(0, limit) : skipped;\n        const idExcluded = this.options.fields && this.options.fields.id === 0;\n        return limited.map((item) => {\n            if (!this.options.fields)\n                return item;\n            return Object.assign(Object.assign({}, idExcluded ? {} : { id: item.id }), project(item, this.options.fields));\n        });\n    }\n    depend(changeEvents) {\n        if (!this.options.reactive)\n            return;\n        if (!isInReactiveScope(this.options.reactive))\n            return;\n        const signal = this.options.reactive.create();\n        signal.depend();\n        const notify = () => signal.notify();\n        function buildNotifier(event) {\n            const eventHandler = changeEvents[event];\n            return (...args) => {\n                // if the event is just turned on with true, we can notify directly\n                if (eventHandler === true) {\n                    notify();\n                    return;\n                }\n                // if the event is something else than true or a function, we don't care about it\n                if (typeof eventHandler !== 'function')\n                    return;\n                // if the event is a function, we call it with the notify function\n                eventHandler(notify)(...args);\n            };\n        }\n        const stop = this.observeRawChanges({\n            added: buildNotifier('added'),\n            addedBefore: buildNotifier('addedBefore'),\n            changed: buildNotifier('changed'),\n            changedField: buildNotifier('changedField'),\n            movedBefore: buildNotifier('movedBefore'),\n            removed: buildNotifier('removed'),\n        }, true);\n        if (this.options.reactive.onDispose) {\n            this.options.reactive.onDispose(() => stop(), signal);\n        }\n        this.onCleanup(stop);\n    }\n    ensureObserver() {\n        if (!this.observer) {\n            const observer = new Observer(() => {\n                const requery = () => {\n                    observer.runChecks(this.getItems());\n                };\n                const cleanup = this.options.bindEvents && this.options.bindEvents(requery);\n                return () => {\n                    if (cleanup)\n                        cleanup();\n                };\n            });\n            this.onCleanup(() => observer.stop());\n            this.observer = observer;\n        }\n        return this.observer;\n    }\n    observeRawChanges(callbacks, skipInitial = false) {\n        const observer = this.ensureObserver();\n        observer.addCallbacks(callbacks, skipInitial);\n        observer.runChecks(this.getItems());\n        return () => {\n            observer.removeCallbacks(callbacks);\n            if (!observer.isEmpty())\n                return;\n            // remove observer if it's empty\n            observer.stop();\n            this.observer = undefined;\n        };\n    }\n    cleanup() {\n        this.onCleanupCallbacks.forEach((callback) => {\n            callback();\n        });\n        this.onCleanupCallbacks = [];\n    }\n    onCleanup(callback) {\n        this.onCleanupCallbacks.push(callback);\n    }\n    forEach(callback) {\n        const items = this.getItems();\n        this.depend(Object.assign({ addedBefore: true, removed: true, movedBefore: true }, this.options.fieldTracking ? {} : { changed: true }));\n        items.forEach((item) => {\n            callback(this.transform(item));\n        });\n    }\n    map(callback) {\n        const results = [];\n        this.forEach((item) => {\n            results.push(callback(item));\n        });\n        return results;\n    }\n    fetch() {\n        return this.map(item => item);\n    }\n    count() {\n        const items = this.getItems();\n        this.depend({\n            added: true,\n            removed: true,\n        });\n        return items.length;\n    }\n    observeChanges(callbacks, skipInitial = false) {\n        return this.observeRawChanges(Object\n            .entries(callbacks)\n            .reduce((memo, [callbackName, callback]) => {\n            if (!callback)\n                return memo;\n            return Object.assign(Object.assign({}, memo), { [callbackName]: (item, before) => {\n                    const transformedValue = this.transform(item);\n                    const hasBeforeParam = before !== undefined;\n                    const transformedBeforeValue = hasBeforeParam && before\n                        ? this.transform(before)\n                        : null;\n                    return callback(transformedValue, ...hasBeforeParam ? [transformedBeforeValue] : []);\n                } });\n        }, {}), skipInitial);\n    }\n    requery() {\n        if (!this.observer)\n            return;\n        this.observer.runChecks(this.getItems());\n    }\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","export default function intersection(...arrays) {\n    if (arrays.length === 0)\n        return [];\n    return [...new Set(arrays.reduce((a, b) => a.filter(c => b.includes(c))))];\n}\n","import { __rest } from \"tslib\";\nimport intersection from '../utils/intersection';\nexport function getMergedIndexInfo(indexProviders, selector) {\n    return indexProviders.reduce((memo, indexProvider) => {\n        /* istanbul ignore if -- @preserve */ // ignored because it's deprecated\n        if (indexProvider.getItemPositions) {\n            const result = indexProvider.getItemPositions(selector);\n            if (result == null)\n                return memo;\n            return {\n                matched: true,\n                positions: memo.matched\n                    ? intersection(memo.positions, result)\n                    : result,\n                optimizedSelector: memo.optimizedSelector,\n            };\n        }\n        const info = indexProvider.query(selector);\n        if (!info.matched)\n            return memo;\n        const optimizedSelector = Object.fromEntries(Object.entries(memo.optimizedSelector)\n            .filter(([key]) => !info.fields.includes(key)));\n        return {\n            matched: true,\n            positions: [...new Set(memo.matched\n                    ? intersection(memo.positions, info.positions)\n                    : info.positions)],\n            optimizedSelector,\n        };\n    }, {\n        matched: false,\n        positions: [],\n        optimizedSelector: Object.assign({}, selector),\n    });\n}\nexport default function getIndexInfo(indexProviders, selector) {\n    if (selector == null || Object.keys(selector).length <= 0) {\n        return { matched: false, positions: [], optimizedSelector: selector };\n    }\n    const { $and, $or } = selector, rest = __rest(selector, [\"$and\", \"$or\"]);\n    const flatInfo = getMergedIndexInfo(indexProviders, rest);\n    let { matched, positions } = flatInfo;\n    const newSelector = flatInfo.optimizedSelector;\n    if (Array.isArray($and)) {\n        const $andNew = [];\n        for (const sel of $and) {\n            const { matched: selMatched, positions: selPositions, optimizedSelector, } = getIndexInfo(indexProviders, sel);\n            if (selMatched) {\n                positions = matched ? intersection(positions, selPositions) : selPositions;\n                matched = true;\n                if (Object.keys(optimizedSelector).length > 0) {\n                    $andNew.push(optimizedSelector);\n                }\n            }\n            else {\n                $andNew.push(sel);\n            }\n        }\n        if ($andNew.length > 0)\n            newSelector.$and = $andNew;\n    }\n    if (Array.isArray($or)) {\n        const $orNew = [];\n        for (const sel of $or) {\n            const { matched: selMatched, positions: selPositions, optimizedSelector, } = getIndexInfo(indexProviders, sel);\n            if (selMatched) {\n                positions = [...new Set([...positions, ...selPositions])];\n                matched = true;\n                if (Object.keys(optimizedSelector).length > 0) {\n                    $orNew.push(optimizedSelector);\n                }\n            }\n            else {\n                $orNew.push(sel);\n            }\n        }\n        if ($orNew.length > 0)\n            newSelector.$or = $orNew;\n    }\n    return {\n        matched,\n        positions: positions || [],\n        optimizedSelector: newSelector,\n    };\n}\n","export default function createIndexProvider(definition) {\n    return definition;\n}\n","const expressionKeys = [\n    '$eq',\n    '$gt',\n    '$gte',\n    '$lt',\n    '$lte',\n    '$in',\n    '$nin',\n    '$ne',\n    '$exists',\n    '$not',\n    '$expr',\n    '$jsonSchema',\n    '$mod',\n    '$regex',\n    '$options',\n    '$text',\n    '$where',\n    '$all',\n    '$elemMatch',\n    '$size',\n    '$bitsAllClear',\n    '$bitsAllSet',\n    '$bitsAnyClear',\n    '$bitsAnySet',\n];\nexport default function isFieldExpression(expression) {\n    if (typeof expression !== 'object' || expression == null) {\n        return false;\n    }\n    const keys = Object.keys(expression);\n    if (keys.length === 0) {\n        return false;\n    }\n    const hasInvalidKeys = keys.some(key => !expressionKeys.includes(key));\n    if (hasInvalidKeys)\n        return false;\n    const hasValidKeys = keys.every(key => expressionKeys.includes(key));\n    return hasValidKeys;\n}\n","import isFieldExpression from './isFieldExpression';\nimport serializeValue from './serializeValue';\nexport default function getMatchingKeys(field, selector) {\n    if (selector[field] instanceof RegExp)\n        return null;\n    if (selector[field] != null) {\n        if (isFieldExpression(selector[field])) {\n            const is$in = isFieldExpression(selector[field])\n                && Array.isArray(selector[field].$in)\n                && selector[field].$in.length;\n            if (is$in) {\n                const optimizedSelector = Object.assign(Object.assign({}, selector), { [field]: Object.assign({}, selector[field]) });\n                delete optimizedSelector[field].$in;\n                if (Object.keys(optimizedSelector[field]).length === 0) {\n                    delete optimizedSelector[field];\n                }\n                return selector[field].$in.map(serializeValue);\n            }\n            return null;\n        }\n        return [serializeValue(selector[field])];\n    }\n    return null;\n}\n","import createIndexProvider from '../createIndexProvider';\nimport get from '../utils/get';\nimport getMatchingKeys from '../utils/getMatchingKeys';\nimport serializeValue from '../utils/serializeValue';\nexport function createExternalIndex(field, index) {\n    return createIndexProvider({\n        query(selector) {\n            const keys = getMatchingKeys(field, selector);\n            if (keys == null)\n                return { matched: false };\n            const itemPositions = keys\n                .reduce((memo, key) => [...memo, ...index.get(key) || []], []);\n            return {\n                matched: true,\n                positions: itemPositions,\n                fields: [field],\n            };\n        },\n        rebuild() {\n            // rebuilding is done externally\n        },\n    });\n}\nexport default function createIndex(field) {\n    const index = new Map();\n    return Object.assign(Object.assign({}, createExternalIndex(field, index)), { rebuild(items) {\n            index.clear();\n            items.forEach((item, i) => {\n                const value = serializeValue(get(item, field));\n                const current = index.get(value) || new Set();\n                current.add(i);\n                index.set(value, current);\n            });\n        } });\n}\n","import EventEmitter from '../types/EventEmitter';\nimport match from '../utils/match';\nimport modify from '../utils/modify';\nimport isEqual from '../utils/isEqual';\nimport randomId from '../utils/randomId';\nimport deepClone from '../utils/deepClone';\nimport serializeValue from '../utils/serializeValue';\nimport createSignal from '../utils/createSignal';\nimport Cursor from './Cursor';\nimport getIndexInfo from './getIndexInfo';\nimport { createExternalIndex } from './createIndex';\nexport { default as createIndex } from './createIndex';\nfunction hasPendingUpdates(pendingUpdates) {\n    return pendingUpdates.added.length > 0\n        || pendingUpdates.modified.length > 0\n        || pendingUpdates.removed.length > 0;\n}\nfunction applyUpdates(currentItems, { added, modified, removed }) {\n    const items = currentItems.slice();\n    added.forEach((item) => {\n        items.push(item);\n    });\n    modified.forEach((item) => {\n        const index = items.findIndex(({ id }) => id === item.id);\n        if (index === -1)\n            return;\n        items[index] = item;\n    });\n    removed.forEach((item) => {\n        const index = items.findIndex(({ id }) => id === item.id);\n        if (index === -1)\n            return;\n        items.splice(index, 1);\n    });\n    return items;\n}\n// eslint-disable-next-line max-len\nclass Collection extends EventEmitter {\n    static batch(callback) {\n        Collection.batchOperationInProgress = true;\n        Collection.collections.reduce((memo, collection) => () => collection.batch(() => memo()), callback)();\n        Collection.batchOperationInProgress = false;\n    }\n    constructor(options) {\n        var _a, _b, _c, _d;\n        super();\n        this.persistenceAdapter = null;\n        this.indexProviders = [];\n        this.indicesOutdated = false;\n        this.idIndex = new Map();\n        this.batchOperationInProgress = false;\n        this.isDisposed = false;\n        this.postBatchCallbacks = new Set();\n        Collection.collections.push(this);\n        this.options = Object.assign({ memory: [] }, options);\n        this.debugMode = (_a = this.options.enableDebugMode) !== null && _a !== void 0 ? _a : Collection.debugMode;\n        this.indexProviders = [\n            createExternalIndex('id', this.idIndex),\n            ...(this.options.indices || []),\n        ];\n        this.rebuildIndices();\n        this.isPullingSignal = createSignal((_b = this.options.reactivity) === null || _b === void 0 ? void 0 : _b.create(), !!(options === null || options === void 0 ? void 0 : options.persistence));\n        this.isPushingSignal = createSignal((_c = this.options.reactivity) === null || _c === void 0 ? void 0 : _c.create(), false);\n        this.on('persistence.pullStarted', () => {\n            this.isPullingSignal.set(true);\n        });\n        this.on('persistence.pullCompleted', () => {\n            this.isPullingSignal.set(false);\n        });\n        this.on('persistence.pushStarted', () => {\n            this.isPushingSignal.set(true);\n        });\n        this.on('persistence.pushCompleted', () => {\n            this.isPushingSignal.set(false);\n        });\n        this.persistenceAdapter = (_d = this.options.persistence) !== null && _d !== void 0 ? _d : null;\n        if (this.persistenceAdapter) {\n            let ongoingSaves = 0;\n            let isInitialized = false;\n            const pendingUpdates = { added: [], modified: [], removed: [] };\n            const loadPersistentData = async (data) => {\n                if (!this.persistenceAdapter)\n                    throw new Error('Persistence adapter not found');\n                this.emit('persistence.pullStarted');\n                // load items from persistence adapter and push them into memory\n                const { items, changes } = data !== null && data !== void 0 ? data : await this.persistenceAdapter.load();\n                if (items) {\n                    // as we overwrite all items, we need to discard if there are ongoing saves\n                    if (ongoingSaves > 0)\n                        return;\n                    // push new items to this.memory() and delete old ones\n                    this.memory().splice(0, this.memoryArray().length, ...items);\n                    this.idIndex.clear();\n                    // eslint-disable-next-line array-callback-return\n                    this.memory().map((item, index) => {\n                        this.idIndex.set(serializeValue(item.id), new Set([index]));\n                    });\n                }\n                else if (changes) {\n                    changes.added.forEach((item) => {\n                        const index = this.memory().findIndex(doc => doc.id === item.id);\n                        if (index >= 0) { // item already exists; doing upsert\n                            this.memory().splice(index, 1, item);\n                            return;\n                        }\n                        // item does not exists yet; normal insert\n                        this.memory().push(item);\n                        const itemIndex = this.memory().findIndex(doc => doc === item);\n                        this.idIndex.set(serializeValue(item.id), new Set([itemIndex]));\n                    });\n                    changes.modified.forEach((item) => {\n                        const index = this.memory().findIndex(doc => doc.id === item.id);\n                        if (index === -1)\n                            throw new Error('Cannot resolve index for item');\n                        this.memory().splice(index, 1, item);\n                    });\n                    changes.removed.forEach((item) => {\n                        const index = this.memory().findIndex(doc => doc.id === item.id);\n                        if (index === -1)\n                            throw new Error('Cannot resolve index for item');\n                        this.memory().splice(index, 1);\n                    });\n                }\n                this.rebuildIndices();\n                this.emit('persistence.received');\n                // emit persistence.pullCompleted in next tick to let cursor observers\n                // do the requery before the loading state updates\n                setTimeout(() => this.emit('persistence.pullCompleted'), 0);\n            };\n            const saveQueue = {\n                added: [],\n                modified: [],\n                removed: [],\n            };\n            let isFlushing = false;\n            const flushQueue = () => {\n                if (!this.persistenceAdapter)\n                    throw new Error('Persistence adapter not found');\n                if (ongoingSaves <= 0)\n                    this.emit('persistence.pushStarted');\n                if (isFlushing)\n                    return;\n                if (!hasPendingUpdates(saveQueue))\n                    return;\n                isFlushing = true;\n                ongoingSaves += 1;\n                const currentItems = this.memoryArray();\n                const changes = Object.assign({}, saveQueue);\n                saveQueue.added = [];\n                saveQueue.modified = [];\n                saveQueue.removed = [];\n                this.persistenceAdapter.save(currentItems, changes)\n                    .then(() => {\n                    this.emit('persistence.transmitted');\n                }).catch((error) => {\n                    this.emit('persistence.error', error instanceof Error ? error : new Error(error));\n                }).finally(() => {\n                    ongoingSaves -= 1;\n                    isFlushing = false;\n                    flushQueue();\n                    if (ongoingSaves <= 0)\n                        this.emit('persistence.pushCompleted');\n                });\n            };\n            this.on('added', (item) => {\n                if (!isInitialized) {\n                    pendingUpdates.added.push(item);\n                    return;\n                }\n                saveQueue.added.push(item);\n                flushQueue();\n            });\n            this.on('changed', (item) => {\n                if (!isInitialized) {\n                    pendingUpdates.modified.push(item);\n                    return;\n                }\n                saveQueue.modified.push(item);\n                flushQueue();\n            });\n            this.on('removed', (item) => {\n                if (!isInitialized) {\n                    pendingUpdates.removed.push(item);\n                    return;\n                }\n                saveQueue.removed.push(item);\n                flushQueue();\n            });\n            this.persistenceAdapter.register(data => loadPersistentData(data))\n                .then(async () => {\n                if (!this.persistenceAdapter)\n                    throw new Error('Persistence adapter not found');\n                let currentItems = this.memoryArray();\n                await loadPersistentData();\n                while (hasPendingUpdates(pendingUpdates)) {\n                    const added = pendingUpdates.added.splice(0);\n                    const modified = pendingUpdates.modified.splice(0);\n                    const removed = pendingUpdates.removed.splice(0);\n                    currentItems = applyUpdates(this.memoryArray(), { added, modified, removed });\n                    // eslint-disable-next-line no-await-in-loop\n                    await this.persistenceAdapter.save(currentItems, { added, modified, removed })\n                        .then(() => {\n                        this.emit('persistence.transmitted');\n                    });\n                }\n                await loadPersistentData();\n                isInitialized = true;\n                // emit persistence.init in next tick to make\n                // data available before the loading state updates\n                setTimeout(() => this.emit('persistence.init'), 0);\n            })\n                .catch((error) => {\n                this.emit('persistence.error', error instanceof Error ? error : new Error(error));\n            });\n        }\n    }\n    isPulling() {\n        var _a;\n        return (_a = this.isPullingSignal.get()) !== null && _a !== void 0 ? _a : false;\n    }\n    isPushing() {\n        var _a;\n        return (_a = this.isPushingSignal.get()) !== null && _a !== void 0 ? _a : false;\n    }\n    isLoading() {\n        const isPulling = this.isPulling();\n        const isPushing = this.isPushing();\n        return isPulling || isPushing;\n    }\n    getDebugMode() {\n        return this.debugMode;\n    }\n    setDebugMode(enable) {\n        this.debugMode = enable;\n    }\n    profile(fn, measureFunction) {\n        if (!this.debugMode)\n            return fn();\n        const startTime = performance.now();\n        const result = fn();\n        const endTime = performance.now();\n        measureFunction(endTime - startTime);\n        return result;\n    }\n    executeInDebugMode(fn) {\n        if (!this.debugMode)\n            return;\n        const callstack = new Error().stack || '';\n        fn(callstack);\n    }\n    rebuildIndices() {\n        this.indicesOutdated = true;\n        if (this.batchOperationInProgress)\n            return;\n        this.rebuildAllIndices();\n    }\n    rebuildAllIndices() {\n        this.idIndex.clear();\n        // eslint-disable-next-line array-callback-return\n        this.memory().map((item, index) => {\n            this.idIndex.set(serializeValue(item.id), new Set([index]));\n        });\n        this.indexProviders.forEach(index => index.rebuild(this.memoryArray()));\n        this.indicesOutdated = false;\n    }\n    getIndexInfo(selector) {\n        if (selector != null\n            && Object.keys(selector).length === 1\n            && 'id' in selector\n            && typeof selector.id !== 'object') {\n            return {\n                matched: true,\n                positions: Array.from(this.idIndex.get(serializeValue(selector.id)) || []),\n                optimizedSelector: {},\n            };\n        }\n        if (selector == null || this.indicesOutdated) {\n            return {\n                matched: false,\n                positions: [],\n                optimizedSelector: {},\n            };\n        }\n        return getIndexInfo(this.indexProviders, selector);\n    }\n    getItemAndIndex(selector) {\n        const memory = this.memoryArray();\n        const indexInfo = this.getIndexInfo(selector);\n        const items = indexInfo.matched\n            ? indexInfo.positions.map(index => memory[index])\n            : memory;\n        const item = items.find(doc => match(doc, selector));\n        const index = (indexInfo.matched\n            && indexInfo.positions.find(itemIndex => memory[itemIndex] === item))\n            || memory.findIndex(doc => doc === item);\n        if (item == null)\n            return { item: null, index: -1 };\n        if (index === -1)\n            throw new Error('Cannot resolve index for item');\n        return { item, index };\n    }\n    deleteFromIdIndex(id, index) {\n        this.idIndex.delete(serializeValue(id));\n        // offset all indices after the deleted item -1, but only during batch operations\n        if (!this.batchOperationInProgress)\n            return;\n        this.idIndex.forEach(([currenIndex], key) => {\n            if (currenIndex > index) {\n                this.idIndex.set(key, new Set([currenIndex - 1]));\n            }\n        });\n    }\n    memory() {\n        return this.options.memory;\n    }\n    memoryArray() {\n        return this.memory().map(item => item);\n    }\n    transform(item) {\n        if (!this.options.transform)\n            return item;\n        return this.options.transform(item);\n    }\n    getItems(selector) {\n        return this.profile(() => {\n            const indexInfo = this.getIndexInfo(selector);\n            const matchItems = (item) => {\n                if (indexInfo.optimizedSelector == null)\n                    return true; // if no selector is given, return all items\n                if (Object.keys(indexInfo.optimizedSelector).length <= 0)\n                    return true; // if selector is empty, return all items\n                const matches = match(item, indexInfo.optimizedSelector);\n                return matches;\n            };\n            // no index available, use complete memory\n            if (!indexInfo.matched)\n                return this.memory().filter(matchItems);\n            const memory = this.memoryArray();\n            const items = indexInfo.positions.map(index => memory[index]);\n            this.emit('getItems', selector);\n            return items.filter(matchItems);\n        }, measuredTime => this.executeInDebugMode(callstack => this.emit('_debug.getItems', callstack, selector, measuredTime)));\n    }\n    /**\n     * Disposes the collection, runs the dispose method of the persistence adapter\n     * and clears all internal data structures.\n     */\n    async dispose() {\n        var _a;\n        if ((_a = this.persistenceAdapter) === null || _a === void 0 ? void 0 : _a.unregister)\n            await this.persistenceAdapter.unregister();\n        this.persistenceAdapter = null;\n        this.memory().map(() => this.memory().pop());\n        this.idIndex.clear();\n        this.indexProviders = [];\n        this.isDisposed = true;\n    }\n    find(selector, options) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (selector !== undefined && (!selector || typeof selector !== 'object'))\n            throw new Error('Invalid selector');\n        const cursor = new Cursor(() => this.getItems(selector), Object.assign(Object.assign({ reactive: this.options.reactivity }, options), { transform: this.transform.bind(this), bindEvents: (requery) => {\n                const handleRequery = () => {\n                    if (this.batchOperationInProgress) {\n                        this.postBatchCallbacks.add(requery);\n                        return;\n                    }\n                    requery();\n                };\n                this.addListener('persistence.received', handleRequery);\n                this.addListener('added', handleRequery);\n                this.addListener('changed', handleRequery);\n                this.addListener('removed', handleRequery);\n                this.emit('observer.created', selector, options);\n                return () => {\n                    this.removeListener('persistence.received', handleRequery);\n                    this.removeListener('added', handleRequery);\n                    this.removeListener('changed', handleRequery);\n                    this.removeListener('removed', handleRequery);\n                    this.emit('observer.disposed', selector, options);\n                };\n            } }));\n        this.emit('find', selector, options, cursor);\n        this.executeInDebugMode(callstack => this.emit('_debug.find', callstack, selector, options, cursor));\n        return cursor;\n    }\n    findOne(selector, options) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        const cursor = this.find(selector, Object.assign({ limit: 1 }, options));\n        const returnValue = cursor.fetch()[0] || undefined;\n        this.emit('findOne', selector, options, returnValue);\n        this.executeInDebugMode(callstack => this.emit('_debug.findOne', callstack, selector, options, returnValue));\n        return returnValue;\n    }\n    batch(callback) {\n        this.batchOperationInProgress = true;\n        callback();\n        this.batchOperationInProgress = false;\n        // rebuild indiices as they are not rebuilt during batch operations\n        this.rebuildAllIndices();\n        // execute all post batch callbacks\n        this.postBatchCallbacks.forEach(cb => cb());\n        this.postBatchCallbacks.clear();\n    }\n    insert(item) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (!item)\n            throw new Error('Invalid item');\n        const newItem = Object.assign({ id: randomId() }, item);\n        if (this.idIndex.has(serializeValue(newItem.id)))\n            throw new Error('Item with same id already exists');\n        this.memory().push(newItem);\n        const itemIndex = this.memory().findIndex(doc => doc === newItem);\n        this.idIndex.set(serializeValue(newItem.id), new Set([itemIndex]));\n        this.rebuildIndices();\n        this.emit('added', newItem);\n        this.emit('insert', newItem);\n        this.executeInDebugMode(callstack => this.emit('_debug.insert', callstack, newItem));\n        return newItem.id;\n    }\n    insertMany(items) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (!items)\n            throw new Error('Invalid items');\n        if (items.length === 0) {\n            return [];\n        }\n        const ids = [];\n        this.batch(() => {\n            items.forEach((item) => {\n                ids.push(this.insert(item));\n            });\n        });\n        return ids;\n    }\n    updateOne(selector, modifier) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (!selector)\n            throw new Error('Invalid selector');\n        if (!modifier)\n            throw new Error('Invalid modifier');\n        const { item, index } = this.getItemAndIndex(selector);\n        if (item == null)\n            return 0;\n        const modifiedItem = modify(deepClone(item), modifier);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        const existingItem = this.findOne({ id: modifiedItem.id }, { reactive: false });\n        if (!isEqual(existingItem, Object.assign(Object.assign({}, existingItem), { id: modifiedItem.id })))\n            throw new Error('Item with same id already exists');\n        this.memory().splice(index, 1, modifiedItem);\n        this.rebuildIndices();\n        this.emit('changed', modifiedItem, modifier);\n        this.emit('updateOne', selector, modifier);\n        this.executeInDebugMode(callstack => this.emit('_debug.updateOne', callstack, selector, modifier));\n        return 1;\n    }\n    updateMany(selector, modifier) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (!selector)\n            throw new Error('Invalid selector');\n        if (!modifier)\n            throw new Error('Invalid modifier');\n        const items = this.getItems(selector);\n        const modifiedItems = [];\n        items.forEach((item) => {\n            const { index } = this.getItemAndIndex({ id: item.id });\n            if (index === -1)\n                throw new Error('Cannot resolve index for item');\n            const modifiedItem = modify(deepClone(item), modifier);\n            this.memory().splice(index, 1, modifiedItem);\n            modifiedItems.push(modifiedItem);\n        });\n        this.rebuildIndices();\n        modifiedItems.forEach((modifiedItem) => {\n            this.emit('changed', modifiedItem, modifier);\n        });\n        this.emit('updateMany', selector, modifier);\n        this.executeInDebugMode(callstack => this.emit('_debug.updateMany', callstack, selector, modifier));\n        return modifiedItems.length;\n    }\n    removeOne(selector) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (!selector)\n            throw new Error('Invalid selector');\n        const { item, index } = this.getItemAndIndex(selector);\n        if (item != null) {\n            this.memory().splice(index, 1);\n            this.deleteFromIdIndex(item.id, index);\n            this.rebuildIndices();\n            this.emit('removed', item);\n        }\n        this.emit('removeOne', selector);\n        this.executeInDebugMode(callstack => this.emit('_debug.removeOne', callstack, selector));\n        return item == null ? 0 : 1;\n    }\n    removeMany(selector) {\n        if (this.isDisposed)\n            throw new Error('Collection is disposed');\n        if (!selector)\n            throw new Error('Invalid selector');\n        const items = this.getItems(selector);\n        items.forEach((item) => {\n            const index = this.memory().findIndex(doc => doc === item);\n            if (index === -1)\n                throw new Error('Cannot resolve index for item');\n            this.memory().splice(index, 1);\n            this.deleteFromIdIndex(item.id, index);\n            this.rebuildIndices();\n        });\n        items.forEach((item) => {\n            this.emit('removed', item);\n        });\n        this.emit('removeMany', selector);\n        this.executeInDebugMode(callstack => this.emit('_debug.removeMany', callstack, selector));\n        return items.length;\n    }\n}\nCollection.collections = [];\nCollection.debugMode = false;\nCollection.batchOperationInProgress = false;\nCollection.enableDebugMode = () => {\n    Collection.debugMode = true;\n    Collection.collections.forEach((collection) => {\n        collection.setDebugMode(true);\n    });\n};\nexport default Collection;\n","export default function createPersistenceAdapter(definition) {\n    return definition;\n}\n","import createPersistenceAdapter from './createPersistenceAdapter';\nexport default function createLocalStorageAdapter(name, options) {\n    const { serialize = JSON.stringify, deserialize = JSON.parse } = options || {};\n    const collectionId = `signaldb-collection-${name}`;\n    function getItems() {\n        return deserialize(localStorage.getItem(collectionId) || '[]');\n    }\n    return createPersistenceAdapter({\n        async load() {\n            const items = getItems();\n            return Promise.resolve({ items });\n        },\n        async save(items, { added, modified, removed }) {\n            const currentItems = getItems();\n            added.forEach((item) => {\n                currentItems.push(item);\n            });\n            modified.forEach((item) => {\n                const index = currentItems.findIndex(({ id }) => id === item.id);\n                /* istanbul ignore if -- @preserve */\n                if (index === -1)\n                    throw new Error(`Item with ID ${item.id} not found`);\n                currentItems[index] = item;\n            });\n            removed.forEach((item) => {\n                const index = currentItems.findIndex(({ id }) => id === item.id);\n                /* istanbul ignore if -- @preserve */\n                if (index === -1)\n                    throw new Error(`Item with ID ${item.id} not found`);\n                currentItems.splice(index, 1);\n            });\n            localStorage.setItem(collectionId, serialize(currentItems));\n            return Promise.resolve();\n        },\n        async register() {\n            return Promise.resolve();\n        },\n    });\n}\n","import createPersistenceAdapter from './createPersistenceAdapter';\nexport default function createFilesystemAdapter(filename, options) {\n    const { serialize = JSON.stringify, deserialize = JSON.parse } = options || {};\n    let savePromise = null;\n    async function getItems() {\n        const fs = await import('fs');\n        const exists = await fs.promises.access(filename).then(() => true).catch(() => false);\n        if (!exists)\n            return [];\n        const contents = await fs.promises.readFile(filename, 'utf8').catch((err) => {\n            /* istanbul ignore next -- @preserve */\n            if (err.code === 'ENOENT')\n                return '[]';\n            /* istanbul ignore next -- @preserve */\n            throw err;\n        });\n        return deserialize(contents);\n    }\n    return createPersistenceAdapter({\n        async register(onChange) {\n            if (typeof window !== 'undefined')\n                throw new Error('Filesystem adapter is not supported in the browser');\n            const fs = await import('fs');\n            const exists = await fs.promises.access(filename).then(() => true).catch(() => false);\n            if (!exists)\n                await fs.promises.writeFile(filename, '[]');\n            fs.watch(filename, { encoding: 'utf8' }, () => {\n                void onChange();\n            });\n        },\n        async load() {\n            if (typeof window !== 'undefined')\n                throw new Error('Filesystem adapter is not supported in the browser');\n            if (savePromise)\n                await savePromise;\n            const items = await getItems();\n            return { items };\n        },\n        async save(_items, { added, modified, removed }) {\n            if (typeof window !== 'undefined')\n                throw new Error('Filesystem adapter is not supported in the browser');\n            if (savePromise)\n                await savePromise;\n            savePromise = getItems()\n                .then((currentItems) => {\n                const items = currentItems.slice();\n                added.forEach((item) => {\n                    items.push(item);\n                });\n                modified.forEach((item) => {\n                    const index = items.findIndex(({ id }) => id === item.id);\n                    /* istanbul ignore if -- @preserve */\n                    if (index === -1)\n                        throw new Error(`Item with ID ${item.id} not found`);\n                    items[index] = item;\n                });\n                removed.forEach((item) => {\n                    const index = items.findIndex(({ id }) => id === item.id);\n                    /* istanbul ignore if -- @preserve */\n                    if (index === -1)\n                        throw new Error(`Item with ID ${item.id} not found`);\n                    items.splice(index, 1);\n                });\n                return items;\n            })\n                .then(async (items) => {\n                const fs = await import('fs');\n                await fs.promises.writeFile(filename, serialize(items));\n            })\n                .then(() => {\n                savePromise = null;\n            });\n            await savePromise;\n        },\n    });\n}\n","import Collection from './Collection';\nimport createLocalStorageAdapter from './persistence/createLocalStorageAdapter';\nimport createFilesystemAdapter from './persistence/createFilesystemAdapter';\nfunction createAdapter(name) {\n    if (typeof window === 'undefined') { // server side\n        return createFilesystemAdapter(`persistent-collection-${name}.json`);\n    }\n    return createLocalStorageAdapter(name);\n}\n// eslint-disable-next-line max-len\nexport default class PersistentCollection extends Collection {\n    constructor(name, options) {\n        super(Object.assign({ persistence: createAdapter(name) }, options));\n    }\n}\n","import createPersistenceAdapter from './createPersistenceAdapter';\nexport function createTemporaryFallbackExecutor(firstResolvingPromiseFn, secondResolvingPromiseFn, options) {\n    var _a;\n    const cacheTimeout = (_a = options === null || options === void 0 ? void 0 : options.cacheTimeout) !== null && _a !== void 0 ? _a : 0;\n    let isResolved = false;\n    let resolvedValue = null;\n    let timeout = null;\n    let secondaryPromise = null;\n    return (...args) => {\n        if (secondaryPromise == null) {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            secondaryPromise = secondResolvingPromiseFn(...args).then((result) => {\n                if (cacheTimeout > 0) {\n                    timeout = setTimeout(() => {\n                        isResolved = false;\n                        resolvedValue = null;\n                        secondaryPromise = null;\n                    }, cacheTimeout);\n                }\n                isResolved = true;\n                resolvedValue = result;\n                if (options === null || options === void 0 ? void 0 : options.onResolve)\n                    options.onResolve(resolvedValue);\n                return result;\n            });\n        }\n        else if (isResolved) {\n            return secondaryPromise;\n        }\n        return firstResolvingPromiseFn(...args);\n    };\n}\nexport default function combinePersistenceAdapters(primary, secondary, options) {\n    var _a;\n    const readPreference = (_a = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _a !== void 0 ? _a : 'secondary';\n    const primaryAdapter = readPreference === 'primary' ? primary : secondary;\n    const secondaryAdapter = readPreference === 'primary' ? secondary : primary;\n    let handleChange = null;\n    const readExecutor = createTemporaryFallbackExecutor(() => primaryAdapter.load(), () => secondaryAdapter.load(), {\n        cacheTimeout: 100,\n        onResolve: (result) => {\n            var _a, _b, _c;\n            if (handleChange)\n                void handleChange();\n            void primaryAdapter.save(result.items || [], {\n                added: ((_a = result.changes) === null || _a === void 0 ? void 0 : _a.added) || [],\n                modified: ((_b = result.changes) === null || _b === void 0 ? void 0 : _b.modified) || [],\n                removed: ((_c = result.changes) === null || _c === void 0 ? void 0 : _c.removed) || [],\n            });\n        },\n    });\n    return createPersistenceAdapter({\n        async register(onChange) {\n            handleChange = onChange;\n            await Promise.all([primary.register(onChange), secondary.register(onChange)]);\n        },\n        async load() {\n            const promise = readExecutor();\n            return promise;\n        },\n        async save(items, changes) {\n            await Promise.all([\n                primaryAdapter.save(items, changes),\n                secondaryAdapter.save(items, changes),\n            ]);\n        },\n    });\n}\n","import Collection from './Collection';\nimport combinePersistenceAdapters from './persistence/combinePersistenceAdapters';\nimport createPersistenceAdapter from './persistence/createPersistenceAdapter';\nimport createSignal from './utils/createSignal';\nexport function createReplicationAdapter(options) {\n    return createPersistenceAdapter({\n        async register(onChange) {\n            if (!options.registerRemoteChange)\n                return;\n            await options.registerRemoteChange(onChange);\n        },\n        load: () => options.pull(),\n        save: (items, changes) => {\n            if (!options.push)\n                throw new Error('Pushing is not configured for this collection. Try to pass a `push` function to the collection options.');\n            return options.push(changes, items);\n        },\n    });\n}\nexport default class ReplicatedCollection extends Collection {\n    constructor(options) {\n        var _a, _b;\n        const replicationAdapter = createReplicationAdapter({\n            registerRemoteChange: options.registerRemoteChange,\n            pull: async () => {\n                this.isPullingRemoteSignal.set(true);\n                try {\n                    return await options.pull();\n                }\n                finally {\n                    this.isPullingRemoteSignal.set(false);\n                }\n            },\n            push: options.push ? (async (changes, items) => {\n                if (!options.push)\n                    throw new Error('Pushing is not configured for this collection. Try to pass a `push` function to the collection options.');\n                this.isPushingRemoteSignal.set(true);\n                try {\n                    await options.push(changes, items);\n                }\n                finally {\n                    this.isPushingRemoteSignal.set(false);\n                }\n            }) : undefined,\n        });\n        const persistenceAdapter = (options === null || options === void 0 ? void 0 : options.persistence)\n            ? combinePersistenceAdapters(replicationAdapter, options.persistence)\n            : replicationAdapter;\n        super(Object.assign(Object.assign({}, options), { persistence: persistenceAdapter }));\n        this.isPullingRemoteSignal = createSignal((_a = options.reactivity) === null || _a === void 0 ? void 0 : _a.create(), false);\n        this.isPushingRemoteSignal = createSignal((_b = options.reactivity) === null || _b === void 0 ? void 0 : _b.create(), false);\n    }\n    isLoading() {\n        const isPullingRemote = this.isPullingRemoteSignal.get();\n        const isPushingRemote = this.isPushingRemoteSignal.get();\n        const isLoading = super.isLoading();\n        return isPullingRemote || isPushingRemote || isLoading;\n    }\n}\n","import ReplicatedCollection from './ReplicatedCollection';\nimport createSignal from './utils/createSignal';\n/**\n * @summary A special collection that automatically fetches items when they are needed.\n */\nexport default class AutoFetchCollection extends ReplicatedCollection {\n    /**\n     * @param options {Object} - Options for the collection.\n     * @param options.fetchQueryItems {Function} - A function that fetches items from the server. It takes the selector as an argument and returns a promise that resolves to an object with an `items` property.\n     * @param options.purgeDelay {Number} - The delay in milliseconds before purging an item from the cache.\n     */\n    constructor(options) {\n        var _a, _b, _c, _d;\n        let triggerRemoteChange;\n        super(Object.assign(Object.assign({}, options), { pull: () => Promise.resolve({\n                items: [...this.itemsCache.values()].reduce((memo, items) => {\n                    const newItems = [...memo];\n                    items.forEach((item) => {\n                        const index = newItems.findIndex(i => i.id === item.id);\n                        if (index === -1) {\n                            newItems.push(item);\n                            return;\n                        }\n                        newItems[index] = this.mergeItems(newItems[index], item);\n                    });\n                    return newItems;\n                }, []),\n            }), registerRemoteChange: async (onChange) => {\n                triggerRemoteChange = onChange;\n                return Promise.resolve();\n            } }));\n        this.activeObservers = new Map();\n        this.observerTimeouts = new Map();\n        this.idQueryCache = new Map();\n        this.itemsCache = new Map();\n        this.triggerReload = null;\n        this.reactivityAdapter = null;\n        this.loadingSignals = new Map();\n        this.mergeItems = (_a = options.mergeItems) !== null && _a !== void 0 ? _a : ((itemA, itemB) => (Object.assign(Object.assign({}, itemA), itemB)));\n        this.purgeDelay = (_b = options.purgeDelay) !== null && _b !== void 0 ? _b : 10000; // 10 seconds\n        this.isFetchingSignal = createSignal((_c = options.reactivity) === null || _c === void 0 ? void 0 : _c.create(), false);\n        if (!triggerRemoteChange)\n            throw new Error('No triggerRemoteChange method found. Looks like your persistence adapter was not registered');\n        this.triggerReload = triggerRemoteChange;\n        this.reactivityAdapter = (_d = options.reactivity) !== null && _d !== void 0 ? _d : null;\n        this.fetchQueryItems = options.fetchQueryItems;\n        this.on('observer.created', selector => this.handleObserverCreation(selector !== null && selector !== void 0 ? selector : {}));\n        this.on('observer.disposed', selector => setTimeout(() => this.handleObserverDisposal(selector !== null && selector !== void 0 ? selector : {}), 100));\n        if (options.registerRemoteChange) {\n            void options.registerRemoteChange(() => this.forceRefetch());\n        }\n    }\n    /**\n     * @summary Registers a query manually that items should be fetched for it\n     * @param selector {Object} Selector of the query\n     */\n    registerQuery(selector) {\n        this.handleObserverCreation(selector);\n    }\n    /**\n     * @summary Unregisters a query manually that items are not fetched anymore for it\n     * @param selector {Object} Selector of the query\n     */\n    unregisterQuery(selector) {\n        this.handleObserverDisposal(selector);\n    }\n    // eslint-disable-next-line class-methods-use-this\n    getKeyForSelector(selector) {\n        return JSON.stringify(selector);\n    }\n    async forceRefetch() {\n        return Promise.all([...this.activeObservers.values()].map(({ selector }) => this.fetchSelector(selector))).then(() => { });\n    }\n    fetchSelector(selector) {\n        this.isFetchingSignal.set(true);\n        return this.fetchQueryItems(selector)\n            .then((response) => {\n            if (!response.items)\n                throw new Error('AutoFetchCollection currently only works with a full item response');\n            // merge the response into the cache\n            this.itemsCache.set(this.getKeyForSelector(selector), response.items);\n            response.items.forEach((item) => {\n                var _a;\n                const queries = (_a = this.idQueryCache.get(item.id)) !== null && _a !== void 0 ? _a : [];\n                queries.push(selector);\n                this.idQueryCache.set(item.id, queries);\n            });\n            this.setLoading(selector, true);\n            this.once('persistence.received', () => {\n                this.setLoading(selector, false);\n            });\n            if (!this.triggerReload)\n                throw new Error('No triggerReload method found. Looks like your persistence adapter was not registered');\n            void this.triggerReload();\n        })\n            .catch((error) => {\n            this.emit('persistence.error', error);\n        })\n            .finally(() => {\n            this.isFetchingSignal.set(false);\n        });\n    }\n    handleObserverCreation(selector) {\n        var _a, _b;\n        const activeObservers = (_b = (_a = this.activeObservers.get(this.getKeyForSelector(selector))) === null || _a === void 0 ? void 0 : _a.count) !== null && _b !== void 0 ? _b : 0;\n        // increment the count of observers for this query\n        this.activeObservers.set(this.getKeyForSelector(selector), {\n            selector,\n            count: activeObservers + 1,\n        });\n        const timeout = this.observerTimeouts.get(this.getKeyForSelector(selector));\n        if (timeout)\n            clearTimeout(timeout);\n        // if this is the first observer for this query, fetch the data\n        if (activeObservers === 0)\n            void this.fetchSelector(selector);\n    }\n    handleObserverDisposal(selector) {\n        var _a, _b;\n        // decrement the count of observers for this query\n        const currentObservers = (_b = (_a = this.activeObservers.get(this.getKeyForSelector(selector))) === null || _a === void 0 ? void 0 : _a.count) !== null && _b !== void 0 ? _b : 0;\n        const activeObservers = currentObservers - 1;\n        if (activeObservers > 0) {\n            this.activeObservers.set(this.getKeyForSelector(selector), {\n                selector,\n                count: activeObservers,\n            });\n            return;\n        }\n        const timeout = this.observerTimeouts.get(this.getKeyForSelector(selector));\n        if (timeout)\n            clearTimeout(timeout);\n        const removeObserver = () => {\n            // if this is the last observer for this query and the purge delay was passed, remove the query from the cache\n            this.activeObservers.delete(this.getKeyForSelector(selector));\n            // remove items for query from the cache\n            this.itemsCache.delete(this.getKeyForSelector(selector));\n            if (!this.triggerReload)\n                throw new Error('No triggerReload method found. Looks like your persistence adapter was not registered');\n            void this.triggerReload();\n        };\n        if (this.purgeDelay === 0) {\n            // remove the query from the cache immediately\n            removeObserver();\n            return;\n        }\n        this.observerTimeouts.set(this.getKeyForSelector(selector), setTimeout(removeObserver, this.purgeDelay));\n    }\n    ensureSignal(selector) {\n        if (!this.reactivityAdapter)\n            throw new Error('No reactivity adapter found');\n        if (!this.loadingSignals.has(this.getKeyForSelector(selector))) {\n            this.loadingSignals.set(this.getKeyForSelector(selector), createSignal(this.reactivityAdapter.create(), false));\n        }\n        return this.loadingSignals.get(this.getKeyForSelector(selector));\n    }\n    setLoading(selector, value) {\n        const signal = this.ensureSignal(selector);\n        signal.set(value);\n    }\n    /**\n     * @summary Indicates wether a query is currently been loaded\n     * @param selector {Object} Selector of the query\n     * @returns The loading state\n     */\n    isLoading(selector) {\n        const isPushing = this.isPushing();\n        if (!selector) {\n            return this.isFetchingSignal.get() || isPushing;\n        }\n        const signal = this.ensureSignal(selector);\n        return signal.get() || isPushing;\n    }\n}\n","import createPersistenceAdapter from './createPersistenceAdapter';\nexport default function createOPFSAdapter(filename, options) {\n    const { serialize = JSON.stringify, deserialize = JSON.parse } = options || {};\n    let savePromise = null;\n    async function getItems() {\n        const opfsRoot = await navigator.storage.getDirectory();\n        const existingFileHandle = await opfsRoot.getFileHandle(filename, { create: true });\n        const contents = await existingFileHandle.getFile().then(val => val.text());\n        return deserialize(contents || '[]');\n    }\n    return createPersistenceAdapter({\n        async register(onChange) {\n            const opfsRoot = await navigator.storage.getDirectory();\n            await opfsRoot.getFileHandle(filename, { create: true });\n            void onChange();\n        },\n        async load() {\n            if (savePromise)\n                await savePromise;\n            const items = await getItems();\n            return { items };\n        },\n        async save(_items, { added, modified, removed }) {\n            if (savePromise)\n                await savePromise;\n            const opfsRoot = await navigator.storage.getDirectory();\n            const existingFileHandle = await opfsRoot.getFileHandle(filename, { create: true });\n            if (added.length === 0 && modified.length === 0 && removed.length === 0) {\n                const writeStream = await existingFileHandle.createWritable();\n                await writeStream.write(serialize(_items));\n                await writeStream.close();\n                await savePromise;\n                return;\n            }\n            savePromise = getItems()\n                .then((currentItems) => {\n                const items = currentItems.slice();\n                added.forEach((item) => {\n                    items.push(item);\n                });\n                modified.forEach((item) => {\n                    const index = items.findIndex(({ id }) => id === item.id);\n                    /* istanbul ignore if -- @preserve */\n                    if (index === -1)\n                        throw new Error(`Item with ID ${item.id} not found`);\n                    items[index] = item;\n                });\n                removed.forEach((item) => {\n                    const index = items.findIndex(({ id }) => id === item.id);\n                    /* istanbul ignore if -- @preserve */\n                    if (index === -1)\n                        throw new Error(`Item with ID ${item.id} not found`);\n                    items.splice(index, 1);\n                });\n                return items;\n            })\n                .then(async (items) => {\n                const writeStream = await existingFileHandle.createWritable();\n                await writeStream.write(serialize(items));\n                await writeStream.close();\n            })\n                .then(() => {\n                savePromise = null;\n            });\n            await savePromise;\n        },\n    });\n}\n","export default function createMemoryAdapter(definition) {\n    return definition;\n}\n","export default function createReactivityAdapter(definition) {\n    return definition;\n}\n","/**\n * Debounces a function.\n * @param func Function to debounce\n * @param wait Time to wait before calling the function.\n * @param [options] Debounce options\n * @param [options.leading] Whether to call the function on the leading edge of the wait interval.\n * @param [options.trailing] Whether to call the function on the trailing edge of the wait interval.\n * @returns The debounced function.\n */\nexport default function debounce(func, wait, options = {}) {\n    let timeout;\n    let result;\n    const { leading = false, trailing = true } = options;\n    function debounced(...args) {\n        const shouldCallImmediately = leading && !timeout;\n        const shouldCallTrailing = trailing && !timeout;\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(() => {\n            timeout = null;\n            if (trailing && !shouldCallImmediately) {\n                result = func.apply(this, args);\n            }\n        }, wait);\n        if (shouldCallImmediately) {\n            result = func.apply(this, args);\n        }\n        else if (!shouldCallTrailing) {\n            result = null;\n        }\n        return result;\n    }\n    return debounced;\n}\n","/**\n * Class for queuing promises to be executed one after the other.\n * This is useful for tasks that should not be executed in parallel.\n * @example\n * const queue = new PromiseQueue();\n * queue.add(() => fetch('https://example.com/api/endpoint1'));\n * queue.add(() => fetch('https://example.com/api/endpoint2'));\n * // The second fetch will only be executed after the first one is done.\n */\nexport default class PromiseQueue {\n    constructor() {\n        this.queue = [];\n        this.pendingPromise = false;\n    }\n    /**\n     * Method to add a new promise to the queue and returns a promise that resolves when this task is done\n     * @param task Function that returns a promise that will be added to the queue\n     * @returns Promise that resolves when the task is done\n     */\n    add(task) {\n        return new Promise((resolve, reject) => {\n            // Wrap the task with the resolve and reject to control its completion from the outside\n            this.queue.push(() => task()\n                .then(resolve)\n                .catch((error) => {\n                reject(error);\n                throw error;\n            }));\n            this.dequeue();\n        });\n    }\n    /**\n     * Method to check if there is a pending promise in the queue\n     * @returns True if there is a pending promise, false otherwise\n     */\n    hasPendingPromise() {\n        return this.pendingPromise;\n    }\n    /**\n     * Method to process the queue\n     */\n    dequeue() {\n        if (this.pendingPromise || this.queue.length === 0) {\n            return;\n        }\n        const task = this.queue.shift();\n        if (!task)\n            return;\n        this.pendingPromise = true;\n        task()\n            .then(() => {\n            this.pendingPromise = false;\n            this.dequeue();\n        })\n            .catch(() => {\n            this.pendingPromise = false;\n            this.dequeue();\n        });\n    }\n}\n","import isEqual from '../utils/isEqual';\n/**\n * Compute changes between two arrays of items.\n * @param oldItems Array of the old items\n * @param newItems Array of the new items\n * @returns The changeset\n */\nexport default function computeChanges(oldItems, newItems) {\n    const added = [];\n    const modified = [];\n    const removed = [];\n    const oldItemsMap = new Map(oldItems.map(item => [item.id, item]));\n    const newItemsMap = new Map(newItems.map(item => [item.id, item]));\n    for (const [id, oldItem] of oldItemsMap) {\n        const newItem = newItemsMap.get(id);\n        if (!newItem) {\n            removed.push(oldItem);\n        }\n        else if (!isEqual(newItem, oldItem)) {\n            modified.push(newItem);\n        }\n    }\n    for (const [id, newItem] of newItemsMap) {\n        if (!oldItemsMap.has(id)) {\n            added.push(newItem);\n        }\n    }\n    return { added, modified, removed };\n}\n","/**\n * Gets the snapshot of items from the last snapshot and the changes.\n * @param lastSnapshot The last snapshot of items\n * @param data The changes to apply to the last snapshot\n * @returns The new snapshot of items\n */\nexport default function getSnapshot(lastSnapshot, data) {\n    if (data.items != null)\n        return data.items;\n    const items = lastSnapshot || [];\n    data.changes.added.forEach(item => items.push(item));\n    data.changes.modified.forEach((item) => {\n        const index = items.findIndex(i => i.id === item.id);\n        if (index !== -1)\n            items[index] = item;\n    });\n    data.changes.removed.forEach((item) => {\n        const index = items.findIndex(i => i.id === item.id);\n        if (index !== -1)\n            items.splice(index, 1);\n    });\n    return items;\n}\n","import Collection from '../Collection';\nimport modify from '../utils/modify';\n/**\n * applies changes to a collection of items\n * @param items The items to apply the changes to\n * @param changes The changes to apply to the items\n * @returns The new items after applying the changes\n */\nexport default function applyChanges(items, changes) {\n    const collection = new Collection();\n    collection.batch(() => {\n        items.forEach(item => collection.insert(item));\n        changes.forEach((change) => {\n            if (change.type === 'remove') {\n                collection.removeOne({ id: change.data });\n                return;\n            }\n            const selector = { id: change.data.id };\n            const itemExists = collection.findOne(selector);\n            if (change.type === 'insert') {\n                if (itemExists) { // update item if it alread exists\n                    collection.updateOne(selector, { $set: change.data });\n                }\n                else { // insert item if it does not exist\n                    collection.insert(change.data);\n                }\n                return;\n            }\n            // change.type === 'update'\n            if (itemExists) { // update item if it exists\n                collection.updateOne(selector, change.data.modifier);\n            }\n            else { // insert item if it does not exist\n                collection.insert(modify(selector, change.data.modifier));\n            }\n        });\n    });\n    return collection.find().fetch();\n}\n","import computeChanges from './computeChanges';\nimport getSnapshot from './getSnapshot';\nimport applyChanges from './applyChanges';\nfunction hasChanges(changes) {\n    return changes.added.length > 0\n        || changes.modified.length > 0\n        || changes.removed.length > 0;\n}\nfunction hasDifference(oldItems, newItems) {\n    return hasChanges(computeChanges(oldItems, newItems));\n}\n/**\n * Does a sync operation based on the provided options. If changes are supplied, these will be rebased on the new data.\n * Afterwards the push method will be called with the remaining changes. A new snapshot will be created and returned.\n * @param options Sync options\n * @param options.changes Changes to call the push method with\n * @param [options.lastSnapshot] The last snapshot\n * @param options.data The new data\n * @param options.pull Method to pull new data\n * @param options.push Method to push changes\n * @param options.insert Method to insert an item\n * @param options.update Method to update an item\n * @param options.remove Method to remove an item\n * @param options.batch Method to batch multiple operations\n * @returns The new snapshot\n */\nexport default async function sync({ changes, lastSnapshot, data, pull, push, insert, update, remove, batch, }) {\n    let newData = data;\n    let previousSnapshot = lastSnapshot || [];\n    let newSnapshot = getSnapshot(lastSnapshot, newData);\n    if (changes.length > 0) {\n        // apply changes on last snapshot and check if there is a difference\n        const lastSnapshotWithChanges = applyChanges(previousSnapshot, changes);\n        if (hasDifference(previousSnapshot, lastSnapshotWithChanges)) {\n            // if yes, apply the changes on the newSnapshot and check if there is a difference\n            const newSnapshotWithChanges = applyChanges(newSnapshot, changes);\n            const changesToPush = computeChanges(newSnapshot, newSnapshotWithChanges);\n            if (hasChanges(changesToPush)) {\n                // if yes, push the changes to the server\n                await push(changesToPush);\n                // pull new data afterwards to ensure that all server changes are applied\n                newData = await pull();\n                newSnapshot = getSnapshot(newSnapshot, newData);\n            }\n            previousSnapshot = lastSnapshotWithChanges;\n        }\n    }\n    // apply the new changes on the collection\n    const newChanges = newData.changes == null\n        ? computeChanges(previousSnapshot, newData.items)\n        : newData.changes;\n    batch(() => {\n        newChanges.added.forEach(item => insert(item));\n        newChanges.modified.forEach(item => update(item.id, { $set: item }));\n        newChanges.removed.forEach(item => remove(item.id));\n    });\n    return newSnapshot;\n}\n","import Collection from '../Collection';\nimport debounce from '../utils/debounce';\nimport PromiseQueue from '../utils/PromiseQueue';\nimport createLocalStorageAdapter from '../persistence/createLocalStorageAdapter';\nimport randomId from '../utils/randomId';\nimport isEqual from '../utils/isEqual';\nimport sync from './sync';\n/**\n * Class to manage syncing of collections.\n * @template CollectionOptions\n * @template ItemType\n * @template IdType\n * @example\n * const syncManager = new SyncManager({\n *    pull: async (collectionOptions) => {\n *      const response = await fetch(`/api/collections/${collectionOptions.name}`)\n *      return await response.json()\n *    },\n *    push: async (collectionOptions, { changes }) => {\n *      await fetch(`/api/collections/${collectionOptions.name}`, {\n *        method: 'POST',\n *        body: JSON.stringify(changes),\n *      })\n *    },\n *  })\n *\n *  const collection = new Collection()\n *  syncManager.addCollection(collection, {\n *    name: 'todos',\n *  })\n *\n *  syncManager.sync('todos')\n */\nexport default class SyncManager {\n    /**\n     * @param options Collection options\n     * @param options.pull Function to pull data from remote source.\n     * @param options.push Function to push data to remote source.\n     * @param [options.registerRemoteChange] Function to register a callback for remote changes.\n     * @param [options.id] Unique identifier for this sync manager. Only nessesary if you have multiple sync managers.\n     * @param [options.persistenceAdapter] Persistence adapter to use for storing changes, snapshots and sync operations.\n     * @param [options.reactivity] Reactivity adapter to use for reactivity.\n     * @param [options.onError] Function to handle errors that occur async during syncing.\n     */\n    constructor(options) {\n        var _a, _b;\n        this.collections = new Map();\n        this.remoteChanges = [];\n        this.syncQueues = new Map();\n        this.isDisposed = false;\n        this.instanceId = randomId();\n        this.deboucedPush = debounce((name) => {\n            this.pushChanges(name).catch(() => { });\n        }, 100);\n        this.options = options;\n        const id = (_a = this.options.id) !== null && _a !== void 0 ? _a : 'default-sync-manager';\n        const { reactivity } = this.options;\n        let changesErrorHandler = () => { };\n        let snapshotsErrorHandler = () => { };\n        let syncOperationsErrorHandler = () => { };\n        const persistenceAdapter = (_b = options.persistenceAdapter) !== null && _b !== void 0 ? _b : createLocalStorageAdapter;\n        const changesPersistenceAdapter = persistenceAdapter(`${id}-changes`, (handler) => {\n            changesErrorHandler = handler;\n        });\n        const snapshotsPersistenceAdapter = persistenceAdapter(`${id}-snapshots`, (handler) => {\n            snapshotsErrorHandler = handler;\n        });\n        const syncOperationsPersistenceAdapter = persistenceAdapter(`${id}-sync-operations`, (handler) => {\n            syncOperationsErrorHandler = handler;\n        });\n        this.changes = new Collection({\n            persistence: changesPersistenceAdapter,\n            reactivity,\n        });\n        this.snapshots = new Collection({\n            persistence: snapshotsPersistenceAdapter,\n            reactivity,\n        });\n        this.syncOperations = new Collection({\n            persistence: syncOperationsPersistenceAdapter,\n            reactivity,\n        });\n        this.changes.on('persistence.error', error => changesErrorHandler(error));\n        this.snapshots.on('persistence.error', error => snapshotsErrorHandler(error));\n        this.syncOperations.on('persistence.error', error => syncOperationsErrorHandler(error));\n        this.persistenceReady = Promise.all([\n            new Promise((resolve, reject) => {\n                this.syncOperations.once('persistence.error', reject);\n                this.syncOperations.once('persistence.init', resolve);\n            }),\n            new Promise((resolve, reject) => {\n                this.changes.once('persistence.error', reject);\n                this.changes.once('persistence.init', resolve);\n            }),\n            new Promise((resolve, reject) => {\n                this.snapshots.once('persistence.error', reject);\n                this.snapshots.once('persistence.init', resolve);\n            }),\n        ]).then(() => { });\n        this.changes.setMaxListeners(1000);\n        this.snapshots.setMaxListeners(1000);\n        this.syncOperations.setMaxListeners(1000);\n    }\n    getSyncQueue(name) {\n        if (this.syncQueues.get(name) == null) {\n            this.syncQueues.set(name, new PromiseQueue());\n        }\n        return this.syncQueues.get(name);\n    }\n    /**\n     * Clears all internal data structures\n     */\n    async dispose() {\n        this.collections.clear();\n        this.syncQueues.clear();\n        this.remoteChanges.splice(0, this.remoteChanges.length);\n        await Promise.all([\n            this.changes.dispose(),\n            this.snapshots.dispose(),\n            this.syncOperations.dispose(),\n        ]);\n        this.isDisposed = true;\n    }\n    /**\n     * Gets a collection with it's options by name\n     * @param name Name of the collection\n     * @throws Will throw an error if the name wasn't found\n     * @returns Tuple of collection and options\n     */\n    getCollection(name) {\n        const entry = this.collections.get(name);\n        if (entry == null)\n            throw new Error(`Collection with id '${name}' not found`);\n        return entry;\n    }\n    /**\n     * Adds a collection to the sync manager.\n     * @param collection Collection to add\n     * @param options Options for the collection. The object needs at least a `name` property.\n     * @param options.name Unique name of the collection\n     */\n    addCollection(collection, options) {\n        if (this.isDisposed)\n            throw new Error('SyncManager is disposed');\n        if (this.options.registerRemoteChange) {\n            this.options.registerRemoteChange(options, async (data) => {\n                if (data == null) {\n                    await this.sync(options.name);\n                }\n                else {\n                    const syncTime = Date.now();\n                    const syncId = this.syncOperations.insert({\n                        start: syncTime,\n                        collectionName: options.name,\n                        instanceId: this.instanceId,\n                        status: 'active',\n                    });\n                    await this.syncWithData(options.name, data)\n                        .then(() => {\n                        // clean up old sync operations\n                        this.syncOperations.removeMany({\n                            id: { $ne: syncId },\n                            collectionName: options.name,\n                            $or: [\n                                { end: { $lte: syncTime } },\n                                { status: 'active' },\n                            ],\n                        });\n                        // update sync operation status to done after everthing was finished\n                        this.syncOperations.updateOne({ id: syncId }, {\n                            $set: { status: 'done', end: Date.now() },\n                        });\n                    })\n                        .catch((error) => {\n                        if (this.options.onError)\n                            this.options.onError(options, error);\n                        this.syncOperations.updateOne({ id: syncId }, {\n                            $set: { status: 'error', end: Date.now(), error: error.stack || error.message },\n                        });\n                        throw error;\n                    });\n                }\n            });\n        }\n        this.collections.set(options.name, [collection, options]);\n        const hasRemoteChange = (change) => {\n            for (const remoteChange of this.remoteChanges) {\n                if (isEqual(remoteChange, change)) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        const removeRemoteChange = (change) => {\n            for (let i = 0; i < this.remoteChanges.length; i += 1) {\n                if (isEqual(this.remoteChanges[i], change)) {\n                    this.remoteChanges.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        collection.on('added', (item) => {\n            // skip the change if it was a remote change\n            if (hasRemoteChange({ collectionName: options.name, type: 'insert', data: item })) {\n                removeRemoteChange({ collectionName: options.name, type: 'insert', data: item });\n                return;\n            }\n            this.changes.insert({\n                collectionName: options.name,\n                time: Date.now(),\n                type: 'insert',\n                data: item,\n            });\n            this.schedulePush(options.name);\n        });\n        collection.on('changed', ({ id }, modifier) => {\n            const data = { id, modifier };\n            // skip the change if it was a remote change\n            if (hasRemoteChange({ collectionName: options.name, type: 'update', data })) {\n                removeRemoteChange({ collectionName: options.name, type: 'update', data });\n                return;\n            }\n            this.changes.insert({\n                collectionName: options.name,\n                time: Date.now(),\n                type: 'update',\n                data,\n            });\n            this.schedulePush(options.name);\n        });\n        collection.on('removed', ({ id }) => {\n            // skip the change if it was a remote change\n            if (hasRemoteChange({ collectionName: options.name, type: 'remove', data: id })) {\n                removeRemoteChange({ collectionName: options.name, type: 'remove', data: id });\n                return;\n            }\n            this.changes.insert({\n                collectionName: options.name,\n                time: Date.now(),\n                type: 'remove',\n                data: id,\n            });\n            this.schedulePush(options.name);\n        });\n    }\n    schedulePush(name) {\n        this.deboucedPush(name);\n    }\n    /**\n     * Starts the sync process for all collections\n     */\n    async syncAll() {\n        if (this.isDisposed)\n            throw new Error('SyncManager is disposed');\n        const errors = [];\n        await Promise.all([...this.collections.keys()].map(id => this.sync(id).catch((error) => {\n            errors.push({ id, error });\n        })));\n        if (errors.length > 0)\n            throw new Error(`Error while syncing collections:\\n${errors.map(e => `${e.id}: ${e.error.message}`).join('\\n\\n')}`);\n    }\n    /**\n     * Checks if a collection is currently beeing synced\n     * @param [name] Name of the collection. If not provided, it will check if any collection is currently beeing synced.\n     * @returns True if the collection is currently beeing synced, false otherwise.\n     */\n    isSyncing(name) {\n        return this.syncOperations.findOne(Object.assign(Object.assign({}, name ? { collectionName: name } : {}), { status: 'active' }), { fields: { status: 1 } }) != null;\n    }\n    /**\n     * Checks if the sync manager is ready to sync.\n     * @returns A promise that resolves when the sync manager is ready to sync.\n     */\n    async isReady() {\n        await this.persistenceReady;\n    }\n    /**\n     * Starts the sync process for a collection\n     * @param name Name of the collection\n     * @param options Options for the sync process.\n     * @param options.force If true, the sync process will be started even if there are no changes and onlyWithChanges is true.\n     * @param options.onlyWithChanges If true, the sync process will only be started if there are changes.\n     */\n    async sync(name, options = {}) {\n        if (this.isDisposed)\n            throw new Error('SyncManager is disposed');\n        await this.isReady();\n        const entry = this.getCollection(name);\n        const collectionOptions = entry[1];\n        const hasActiveSyncs = this.syncOperations.find({\n            collectionName: name,\n            instanceId: this.instanceId,\n            status: 'active',\n        }).count() > 0;\n        const syncTime = Date.now();\n        let syncId = null;\n        // schedule for next tick to allow other tasks to run first\n        await new Promise((resolve) => { setTimeout(resolve, 0); });\n        const doSync = async () => {\n            const lastFinishedSync = this.syncOperations.findOne({ collectionName: name, status: 'done' }, { sort: { end: -1 } });\n            if (options === null || options === void 0 ? void 0 : options.onlyWithChanges) {\n                const currentChanges = this.changes.find({\n                    collectionName: name,\n                    $and: [\n                        { time: { $lte: syncTime } },\n                    ],\n                }, { sort: { time: 1 } }).count();\n                if (currentChanges === 0)\n                    return;\n            }\n            if (!hasActiveSyncs) {\n                syncId = this.syncOperations.insert({\n                    start: syncTime,\n                    collectionName: name,\n                    instanceId: this.instanceId,\n                    status: 'active',\n                });\n            }\n            const data = await this.options.pull(collectionOptions, {\n                lastFinishedSyncStart: lastFinishedSync === null || lastFinishedSync === void 0 ? void 0 : lastFinishedSync.start,\n                lastFinishedSyncEnd: lastFinishedSync === null || lastFinishedSync === void 0 ? void 0 : lastFinishedSync.end,\n            });\n            await this.syncWithData(name, data);\n        };\n        await ((options === null || options === void 0 ? void 0 : options.force) ? doSync() : this.getSyncQueue(name).add(doSync))\n            .catch((error) => {\n            if (syncId != null) {\n                if (this.options.onError)\n                    this.options.onError(collectionOptions, error);\n                this.syncOperations.updateOne({ id: syncId }, {\n                    $set: { status: 'error', end: Date.now(), error: error.stack || error.message },\n                });\n            }\n            throw error;\n        });\n        if (syncId != null) {\n            // clean up old sync operations\n            this.syncOperations.removeMany({\n                id: { $ne: syncId },\n                collectionName: name,\n                $or: [\n                    { end: { $lte: syncTime } },\n                    { status: 'active' },\n                ],\n            });\n            // update sync operation status to done after everthing was finished\n            this.syncOperations.updateOne({ id: syncId }, {\n                $set: { status: 'done', end: Date.now() },\n            });\n        }\n    }\n    /**\n     * Starts the push process for a collection (sync process but only if there are changes)\n     * @param name Name of the collection\n     */\n    async pushChanges(name) {\n        await this.sync(name, {\n            onlyWithChanges: true,\n        });\n    }\n    async syncWithData(name, data) {\n        const entry = this.getCollection(name);\n        const [collection, collectionOptions] = entry;\n        const syncTime = Date.now();\n        const lastFinishedSync = this.syncOperations.findOne({ collectionName: name, status: 'done' }, { sort: { end: -1 } });\n        const lastSnapshot = this.snapshots.findOne({ collectionName: name }, { sort: { time: -1 } });\n        const currentChanges = this.changes.find({\n            collectionName: name,\n            $and: [\n                { time: { $lte: syncTime } },\n            ],\n        }, { sort: { time: 1 } }).fetch();\n        await sync({\n            changes: currentChanges,\n            lastSnapshot: lastSnapshot === null || lastSnapshot === void 0 ? void 0 : lastSnapshot.items,\n            data,\n            pull: () => this.options.pull(collectionOptions, {\n                lastFinishedSyncStart: lastFinishedSync === null || lastFinishedSync === void 0 ? void 0 : lastFinishedSync.start,\n                lastFinishedSyncEnd: lastFinishedSync === null || lastFinishedSync === void 0 ? void 0 : lastFinishedSync.end,\n            }),\n            push: changes => this.options.push(collectionOptions, { changes }),\n            insert: (item) => {\n                if (item.id && !!collection.findOne({ id: item.id })) {\n                    this.remoteChanges.push({\n                        collectionName: name,\n                        type: 'update',\n                        data: { id: item.id, modifier: { $set: item } },\n                    });\n                    // update the item if it already exists\n                    collection.updateOne({ id: item.id }, { $set: item });\n                    return;\n                }\n                this.remoteChanges.push({\n                    collectionName: name,\n                    type: 'insert',\n                    data: item,\n                });\n                collection.insert(item);\n            },\n            update: (itemId, modifier) => {\n                if (itemId && !collection.findOne({ id: itemId })) {\n                    const item = Object.assign(Object.assign({}, modifier.$set), { id: itemId });\n                    this.remoteChanges.push({\n                        collectionName: name,\n                        type: 'insert',\n                        data: item,\n                    });\n                    // insert the item if it does not exist\n                    collection.insert(item);\n                    return;\n                }\n                this.remoteChanges.push({\n                    collectionName: name,\n                    type: 'update',\n                    data: { id: itemId, modifier },\n                });\n                collection.updateOne({ id: itemId }, modifier);\n            },\n            remove: (itemId) => {\n                this.remoteChanges.push({\n                    collectionName: name,\n                    type: 'remove',\n                    data: itemId,\n                });\n                collection.removeOne({ id: itemId });\n            },\n            batch: (fn) => {\n                collection.batch(() => {\n                    fn();\n                });\n            },\n        })\n            .then(async (snapshot) => {\n            // clean up old snapshots\n            this.snapshots.removeMany({ collectionName: name, time: { $lte: syncTime } });\n            // clean up processed changes\n            this.changes.removeMany({\n                collectionName: name,\n                id: { $in: currentChanges.map(c => c.id) },\n            });\n            // insert new snapshot\n            this.snapshots.insert({\n                time: syncTime,\n                collectionName: name,\n                items: snapshot,\n            });\n            // delay sync operation update to next tick to allow other tasks to run first\n            await new Promise((resolve) => { setTimeout(resolve, 0); });\n        })\n            // check if there are unsynced changes to push\n            // after the sync was finished successfully\n            .then(() => this.sync(name, {\n            force: true,\n            onlyWithChanges: true,\n        }));\n    }\n}\n"],"names":["EventEmitter","BaseEventEmitter","event","listener","args","match","item","selector","Query","modify","modifier","clonedItem","updateObject","isEqual","a","b","aKeys","bKeys","i","key","randomId","clone","value","result","val","deepClone","obj","serializeValue","createSignal","dependency","initialValue","newValue","get","path","segments","current","sortItems","items","sortFields","sort","set","deleteIfUndefined","apply","node","nextIsNum","project","fields","fieldValue","uniqueBy","arr","fn","el","Observer","bindEvents","callback","options","events","newItems","oldItemsMap","index","newItemsMap","oldItem","oldBeforeItem","_a","newItem","callbacks","skipInitial","typedKey","isInReactiveScope","reactivity","Cursor","getItems","depend","memo","notify","changedItem","changedFieldName","rawItem","skip","limit","sorted","skipped","limited","idExcluded","changeEvents","signal","buildNotifier","eventHandler","stop","observer","requery","cleanup","results","callbackName","before","transformedValue","hasBeforeParam","transformedBeforeValue","__rest","s","p","intersection","arrays","c","getMergedIndexInfo","indexProviders","indexProvider","info","optimizedSelector","getIndexInfo","$and","$or","rest","flatInfo","matched","positions","newSelector","$andNew","sel","selMatched","selPositions","$orNew","createIndexProvider","definition","expressionKeys","isFieldExpression","expression","keys","getMatchingKeys","field","createExternalIndex","createIndex","hasPendingUpdates","pendingUpdates","applyUpdates","currentItems","added","modified","removed","id","Collection","collection","_b","_c","_d","ongoingSaves","isInitialized","loadPersistentData","data","changes","doc","itemIndex","saveQueue","isFlushing","flushQueue","error","isPulling","isPushing","enable","measureFunction","startTime","endTime","callstack","memory","indexInfo","currenIndex","matchItems","measuredTime","cursor","handleRequery","returnValue","cb","ids","modifiedItem","existingItem","modifiedItems","createPersistenceAdapter","createLocalStorageAdapter","name","serialize","deserialize","collectionId","createFilesystemAdapter","filename","savePromise","fs","contents","err","onChange","_items","createAdapter","PersistentCollection","createTemporaryFallbackExecutor","firstResolvingPromiseFn","secondResolvingPromiseFn","cacheTimeout","isResolved","resolvedValue","timeout","secondaryPromise","combinePersistenceAdapters","primary","secondary","readPreference","primaryAdapter","secondaryAdapter","handleChange","readExecutor","createReplicationAdapter","ReplicatedCollection","replicationAdapter","persistenceAdapter","isPullingRemote","isPushingRemote","isLoading","AutoFetchCollection","triggerRemoteChange","itemA","itemB","response","queries","activeObservers","removeObserver","createOPFSAdapter","existingFileHandle","writeStream","createMemoryAdapter","createReactivityAdapter","debounce","func","wait","leading","trailing","debounced","shouldCallImmediately","shouldCallTrailing","PromiseQueue","task","resolve","reject","computeChanges","oldItems","getSnapshot","lastSnapshot","applyChanges","change","itemExists","hasChanges","hasDifference","sync","pull","push","insert","update","remove","batch","newData","previousSnapshot","newSnapshot","lastSnapshotWithChanges","newSnapshotWithChanges","changesToPush","newChanges","SyncManager","changesErrorHandler","snapshotsErrorHandler","syncOperationsErrorHandler","changesPersistenceAdapter","handler","snapshotsPersistenceAdapter","syncOperationsPersistenceAdapter","entry","syncTime","syncId","hasRemoteChange","remoteChange","removeRemoteChange","errors","e","collectionOptions","hasActiveSyncs","doSync","lastFinishedSync","currentChanges","itemId","snapshot"],"mappings":"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","x_google_ignoreList":[15]}